{"meta":{"title":"fjasmin blog","subtitle":"","description":"","author":"fjasmin","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"My frist-blog","slug":"my-first-blog","date":"2020-07-16T02:57:07.296Z","updated":"2020-07-16T02:45:19.400Z","comments":true,"path":"2020/07/16/my-first-blog/","link":"","permalink":"http://yoursite.com/2020/07/16/my-first-blog/","excerpt":"","text":"使用github pages服务搭建博客的好处有：全是静态文件，访问速度快；免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；博客内容可以轻松打包、转移、发布到其它平台；","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-07-16T02:57:07.296Z","updated":"2020-07-13T01:59:03.175Z","comments":true,"path":"2020/07/16/hello-world/","link":"","permalink":"http://yoursite.com/2020/07/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Markdown基本语法","slug":"Markdown基本语法","date":"2020-07-16T02:37:09.000Z","updated":"2020-07-16T06:08:20.306Z","comments":true,"path":"2020/07/16/Markdown基本语法/","link":"","permalink":"http://yoursite.com/2020/07/16/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown是一种纯文本格式的标记语言。通过简单的标记语法，他可以使普通文本内容具有一定的格式。 优点1.因为是纯文本，所以只要保持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。2.操作简单，Markdown只需要在标题内容前加#即可。 缺点1.需要记忆一些语法。(当然简单易学)2.有些平台并不支持markdown编辑模式。 1开启方法：设置--&gt;默认编辑器--&gt;Markdown编辑器 一.标题在想要设置为标题的文字前面+#来表示。（注意文字之前要有空格）一个#为一级标题，两个#是二级标题。以此类推。共支持六级标题。 注：标准语言一般是在#后跟空格在书写文字。 EX： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题二.字体加粗：要加粗的文字左右分别用两个*号包裹起来。 斜体：要斜体的文字左右分别用一个*号包裹起来。 斜体加粗：要斜体加粗的文字左右分别用三个*号包裹起来。 删除线：要加删除线的文字左右分别用两个~~号包裹起来。 EX： 1234**这是加粗的文字***这是斜体的文字****这是斜体加粗的文字***~~这是加删除线的文字~~ 效果：这是加粗的文字这是斜体的文字这是斜体加粗的文字这是加删除线的文字 三.引用在引用的文字前+&gt;即可，引用也可以嵌套，比如两个&gt;&gt;三个&gt;&gt;&gt;….N个&gt; EX: 1234&gt;这是引用内容&gt;&gt;这也是引用内容&gt;&gt;&gt;这还是引用内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用N个内容 效果如下： 这是引用内容 这也是引用内容 这还是引用内容 引用N个内 四.分割线三个或三个以上-或者*都可以。EX： 1234-------******** 效果如下： 五.图片语法： 1234![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 EX: 12![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg \"区块链\") 效果如下：![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”) 上传本地图片直接点击导航栏的图片标志，选择图片即可markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。markdown图床 六.超链接语法： 12[超链接名](超链接地址 \"超链接title\")title可加可不加 EX： 12[简书](http://jianshu.com)[百度](http://baidu.com) 效果：简书百度 注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。 EX: 1234&lt;a href=\"超链接地址\" target=\"_blank\"&gt;超链接名&lt;/a&gt;示例&lt;a href=\"https://www.jianshu.com\" target=\"_blank\"&gt;简书&lt;/a&gt; 七.列表无序列表语法：无序列表用+-* 任意一种即可 12345- 无序列表+ 无序列表* 无序列表注：+-*与内容文字之间要一个空格 效果如下： 无序列表 无序列表 无序列表 有序列表语法：数字加点 123451. 有序列表2. 有序列表3. 有序列表注：序号与内容文字之间要一个空格 效果如下： 有序列表 有序列表 有序列表 列表嵌套上下级之间敲一个空格即可 语法: 123456789+ 无序排列父类 + 无序排列子类1 + 无序排列子类11 + 无序排列子类12 + 无序排列子类13 + 无序排列子类2 + 无序排列子类3注：序号与内容文字之间要一个空格 效果： 无序排列父类 无序排列子类1 无序排列子类11 无序排列子类12 无序排列子类13 无序排列子类2 无序排列子类3 八.表格语法： 123456789101112表头|表头|表头--|:--|---:内容|内容|内容内容|内容|内容内容|内容|内容注：第二行分割表头和内容，- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右原生的语法两边都要用 | 包起来。此处省略 EX： 12345姓名|技能|排行--|:--|---:武田信玄|风林火山|甲斐之虎上杉谦信|车悬之备|越后军神北条氏康|貼壁之备|相模雄狮 结果：姓名|技能|排行–|:–|—:武田信玄|风林火山|甲斐之虎上杉谦信|车悬之备|越后军神北条氏康|貼壁之备|相模雄狮 九.代码语法：单行代码：代码之间分别用一个反引号包起来 1`代码内容 coding...` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 1234567(```) 代码... 代码... 代码...(```)注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 EX 单行代码: 1`create database hero;` EX 多行代码: 123456(```) function fun()&#123; echo \"这是一句非常牛逼的代码\"; &#125; fun();(```) 运行结果：create database hero; 1234function fun()&#123; echo \"这是一句非常牛逼的代码\"; &#125; fun(); 十.流程图语法： 123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;","categories":[],"tags":[]},{"title":"20200716-你的编程能力从什么时候开始突飞猛进？","slug":"20200716-你的编程能力从什么时候开始突飞猛进？","date":"2020-07-16T02:07:14.000Z","updated":"2020-07-16T02:43:06.854Z","comments":true,"path":"2020/07/16/20200716-你的编程能力从什么时候开始突飞猛进？/","link":"","permalink":"http://yoursite.com/2020/07/16/20200716-%E4%BD%A0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E4%BB%8E%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%BC%80%E5%A7%8B%E7%AA%81%E9%A3%9E%E7%8C%9B%E8%BF%9B%EF%BC%9F/","excerpt":"","text":"百度多了1你就明白：它也许有用，但它封印了你精进计算机英语的机会。 Google多了1你就明白：各地大佬们的文章很Nice，但它们仅是你技术知识体系的精华补充。 开始读书了1你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。 接触到国内外大社的经典书后123你就明白：那些烂大街的21天宝典，7周速成，都是些什么玩意，误人子弟！图灵牛逼，动物牛逼，Manning牛逼。 好书读多了1你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。 多做业务1你就明白：所学的技术该用在哪。 多做用户量大的业务1你就明白：光会用技术，和用好技术是两码子事。 多找第三方开源1你就明白：原来工作摸鱼不是梦 太随便用第三方1你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。 第一次看完源码1你就明白：开始还是很讨厌的，等全盘搞明白了，发现“咦~有点意思”。 源码看多了1你就明白：自己的查克拉莫名的增多了。而且吐槽文档不全的习惯也渐渐少了，一个不服就跑去观摩别人的源码，顺便偷个师。 再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。因为，但凡通过点滴付出，累积出来的结果，都是平淡无声的。","categories":[],"tags":[]}],"categories":[],"tags":[]}